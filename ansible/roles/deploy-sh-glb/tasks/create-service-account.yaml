---
- name: create project
  command: oc --context {{ cluster.context }} new-project {{ namespace }}
  register: oc_res
  failed_when: oc_res.rc >= 2

- name: create service account
  command: oc --context {{ cluster.context }} create serviceaccount {{ service_account_name }} -n {{ namespace }}
  register: oc_res
  failed_when: oc_res.rc >= 2
  
- name: process sa role
  template:
    src: externalDNS-service-account-role.yaml.j2
    dest: "/tmp/externalDNS-service-account-role.yaml"

- name: deploy extenral dns service acocunt role     
  command: oc --context {{ cluster.context }} apply -f /tmp/externalDNS-service-account-role.yaml -n {{ namespace }}
  
- name: get the service account secret name
  shell: oc --context {{ cluster.context }} get secret -n {{ namespace }} | grep -m 1 {{ service_account_name }}-token | awk '{print $1}'
  register: secret_name
  
- name: get the service account token 
  shell: oc --context {{ cluster.context }} describe secret {{ secret_name.stdout }} -n {{ namespace }} | grep "token:" | awk '{print $2}'
  register: token
  
- name: get ca_data
  command: oc --context {{ cluster.context }} get secret {{ secret_name.stdout }} -n {{ namespace }} -o "jsonpath={.data['ca\.crt']}"
  register: ca_data  
  
- name: Add ca and token to Clusters
  set_fact:
    tmp_cluster: "{{ [ (clusters | selectattr('name', 'match', cluster.name) | list | combine({'ca_data': ca_data.stdout, 'token': token.stdout })) ] }}"      
  
- name: Update Clusters
  set_fact:
    clusters: "{{ clusters | rejectattr('name', 'match', cluster['name']) | list }} + {{ tmp_cluster }}"    

- name: compile dependent charts
  shell: helm dependency build {{ role_path }}/files/charts/sh-glb    